.TH EFIND 1
.SH NAME
efind \- search for files in a directory hierarchy
.SH SYNOPSIS
\fBefind\fR [starting-point...] [expression] [options]
.SH DESCRIPTION
\fBefind\fR searches for files in a directory hierarchy. Basically it's a
wrapper for find(1) providing an easier and more intuitive expression syntax.
It can be extended by custom functions to filter search results.
.SH OPTIONS
.IP "\fB\-d, \-\-dir\fR=\fIdir"
Starting-point of the search.
.IP "\fB\-e, \-\-expr\fR=\fIexpr"
Search expression.
.IP "\fB\-L, \-\-follow"
Follow symbolic links.
.IP "\fB\-\-max-depth\fR=\fIlevels"
Maximum search depth.
.IP "\fB\-\-regex-type\fR=\fItype"
Changes the understood regular expression syntax. Currently-implemented types
are emacs (this is the default), posix-awk, posix-basic, posix-egrep and
posix-extended.
.IP "\fB\-\-printf\fR=\fIformat"
Print \fIformat\fR on standard output, interpreting `\\' escapes and `%' directives.
Field widths and precisions can be specified as with the `printf' C function.
The escape sequences are:
.RS
.IP \ea
Alarm bell.
.IP \eb
Backspace.
.IP \ef
Form feed.
.IP \en
Newline.
.IP \er
Carriage return.
.IP \et
Horizontal tab.
.IP \ev
Vertical tab.
.IP \e0
ASCII NUL.
.IP \e\e
A literal backslash (`\e').
.IP \eNNN
The character whose ASCII code is NNN (octal).
.IP \exNN
The character whose ASCII code is NN (hex).
.PP
Any other character following a `\e' is printed.
.IP %%
A literal percent sign.
.IP %A\fIk\fP
File's last access time in the format specified by \fIk\fR or in the format
returned by the C `ctime' function.
.RS
.PP
Time fields:
.IP H
hour (00..23)
.IP I
hour (01..12)
.IP k
hour (0..23)
.IP l
hour (1..12)
.IP M
minute (00..59)
.IP p
locale's AM or PM
.IP r
time, 12-hour (hh:mm:ss [AP]M)
.IP S
second (00.00..61.00). There is a fractional part.
.IP T
time, 24-hour (hh:mm:ss.xxxxxxxxxx)
.IP X
locale's time representation (H:M:S). The seconds field includes a
fractional part.
.IP Z
time zone (e.g., EDT), or nothing if no time zone is determinable
.PP
Date fields:
.IP a
locale's abbreviated weekday name (Sun..Sat)
.IP A
locale's full weekday name, variable length (Sunday..Saturday)
.IP b
locale's abbreviated month name (Jan..Dec)
.IP B
locale's full month name, variable length (January..December)
.IP c
locale's date and time (Sat Nov 04 12:02:33 EST 1989). The format is
the same as for
.BR ctime (3)
and so to preserve compatibility with that format, there is no fractional part
in the seconds field.
.IP d
day of month (01..31)
.IP D
date (mm/dd/yy)
.IP h
same as b
.IP j
day of year (001..366)
.IP m
month (01..12)
.IP U
week number of year with Sunday as first day of week (00..53)
.IP w
day of week (0..6)
.IP W
week number of year with Monday as first day of week (00..53)
.IP x
locale's date representation (mm/dd/yy)
.IP y
last two digits of year (00..99)
.IP Y
year (1970...)
.RE
.IP %b
The amount of disk space used for this file in 512-byte blocks.
.IP %C\fIk\fP
File's last status change time in the format specified by \fIk\fR,
which is the same as for %A.
.IP %D
The device number on which the file exists (the st_dev field of struct
stat) in decimal.
.IP %f
File's name with any leading directories removed (only the last element).
.IP %F
Type of the filesystem the file is on.
.IP %g
File's group name, or numeric group ID if the group has no name.
.IP %G
File's numeric group ID.
.IP %h
Leading directories of file's name (all but the last element).
If the file name contains no slashes (since it is in the current
directory) the %h specifier expands to `.'.
.IP %H
Starting-point under which file was found.
.IP %i
File's inode number (in decimal).
.IP %k
The amount of disk space used for this file in 1K blocks.
.IP %l
Object of symbolic link (empty string if file is not a symbolic link).
.IP %m
File's permission bits (in octal).
.IP %M
File's permissions (in symbolic form, as for
.BR ls ).
.IP %n
Number of hard links to file.
.IP %p
File's name.
.IP %P
File's name with the name of the starting-point under which
it was found removed.
.IP %s
File's size in bytes.
.IP %S
File's sparseness. If the file size is zero, the value printed is
undefined.
.IP %T\fIk\fP
File's last modification time in the format specified by \fIk\fR,
which is the same as for %A.
.IP %u
File's user name, or numeric user ID if the user has no name.
.IP %U
File's numeric user ID.
.IP "\fB\-\-order-by\fR=\fIfields"
Fields to sort search result by. The same field names as in the --printf
option are supported. Prepend `-' to a field to sort in descending order.
.IP "\fB\-p, \-\-print"
Don't search files but print translated expression to stdout.
.IP "\fB\-q, \-\-quote"
Quote special shell characters when printing the expression.
.IP "\fB\-\-list-extensions"
Print a list of installed extensions.
.IP "\fB\-\-show-blacklist"
Print a list of blacklisted extensions.
.IP "\fB\-v, \-\-version"
Output version information and exit.
.IP "\fB\-h, \-\-help"
Display help and exit.
.IP "\fB\-\-log-level\fR=\fIlevel"
Set verbosity level (0 to 6).
.IP "\fB\-\-enable-log-color
Enable colored log messages.
.SH EXPRESSION SYNTAX
A search expression consists of at least one comparison or file flag to test.
Multiple expressions can be evaluated with conditional operators:
.RS
.IP "\fBand"
If an expression returns logical false it returns that value and doesn't
evaluate the next expression. Otherwise it returns the value of the last
expression.
.TP
.IP "\fBor"
If an expression returns logical true it returns that value and doesn't
evaluate the next expression. Otherwise it returns the value of the last
expression.
.RE

Expressions are evaluated from left to right. Use parentheses to force
precedence.

\fBefind\fR supports the following operators to compare a file attribute to a
value:
.RS
.IP "\fB="
equals to
.IP "\fB>"
greater than
.IP "\fB>="
greater or equal
.IP "\fB<"
less than
.IP "\fB<="
less or equal
.RE

Use the \fBnot\fR operator to test if an expression evaluates to logical false.

A value must be of one of the data types listed below:
.RS
.IP "\fBstring"
Quoted sequence of characters.
.IP "\fBnumber"
A natural number.
.IP "\fBtime interval"
Time interval (number) with one of the following suffixes:
.RS
.IP \[bu]
`minute', `minutes'
.IP \[bu]
`hour', `hours'
.IP \[bu]
`day', `days'
.RE
.IP "\fBfile size"
Units of space (number) with one of the following suffixes:
.RS
.IP \[bu]
`bytes', `byte', `b'
.IP \[bu]
`kilobyte', `kilobytes', `kb', `k'
.IP \[bu]
`megabyte', `megabytes', `mb', `M'
.IP \[bu]
`gigabyte', `gigabytes', `G, `gb'
.RE
.IP "\fBfile type"
Supported file types are
.RS
.IP \[bu]
`file'
.IP \[bu]
`directory'
.IP \[bu]
`block'
.IP \[bu]
`character'
.IP \[bu]
`pipe'
.IP \[bu]
`link'
.IP \[bu]
`socket'
.RE
.RE

You can search the following file attributes:
.RS
.IP "\fBname\fR string"
case sensitive filename pattern
.IP "\fBiname\fR string"
case insensitive filename pattern
.IP "\fBregex\fR string"
case sensitive regular expression
.IP "\fBiregex\fR string"
case insensitive regular expression
.IP "\fBatime\fR time-interval"
last access time
.IP "\fBctime\fR time-interval"
last file status change
.IP "\fBmtime\fR time-interval"
last modification time
.IP "\fBsize\fR file-size"
file size
.IP "\fBgroup\fR string"
name of the group owning the file
.IP "\fBgid\fR number"
id of the group owning the file
.IP "\fBuser\fR string"
name of the user owning the file
.IP "\fBuid\fR number"
id of the user owning the file
.IP "\fBtype\fR file-type"
type of the file
.IP "\fBfilesystem\fR string"
name of the filesystem the file is on
.RE

Additionally you can test these flags:

.RS
.IP "\fBreadable"
the file can be read by the user
.IP "\fBwritable"
the user can write to the file
.IP "\fBexecutable"
the user is allowed to execute the file
.IP "\fBempty"
the file is empty and is either a regular file or a directory
.RE
.SH EXTENSIONS
find results can be filtered by custom functions loaded from extension files. 
A function may have optional arguments and returns always an integer. Non-zero
return values evaluate to true.

Users can specifiy wildcard patterns in a personal blacklist (~/.efind/blacklist)
to prevent extensions from being loaded. To disable globally installed extensions,
for instance, add the following line to your blacklist:
.P
.B /etc/efind/extensions/*

Lines starting with an hash ('#') are ignored.

To show all blacklisted extensions type in
.P
.B efind --show-blacklist

.SH ENVIRONMENT VARIABLES
.IP "\fBEFIND_EXTENSION_PATH"
A colon-separated list of directories in which efind searches for additional
extensions.

.SH FILES
.IP "\fB~/.efind/extensions"
local extension files
.IP "\fB/etc/efind/extensions"
global extension files
.IP "\fB~/.efind/blacklist"
wildcard patterns to prevent extensions from being loaded

.SH EXAMPLES
To find all MP3 and Ogg Vorbis files that were modified less than two days ago
you could use the following expression:

.B efind ~/music '(iname="*.mp3" or iname="*.ogg") and type=file and mtime<2 days'

With the taglib extension you can filter search results by audio tags and
properties:

.B efind ~/music 'iname="*.mp3" and artist_matches("David Bowie") and audio_length()>=120'

Use the
.B \-\-print
and
.B \-\-quote
options to print the translated expression without running find:

.B efind . 'size>1G and name="*.iso"' --print --quote

If not specified \fBefind\fR reads the expression from stdin:

.B echo 'mtime>=10 days' | efind . --print

Search results can be sorted with the --order-by option:

.B efind . 'type=file' --max-depth=1 --order-by '-sp' | head -n10

.SH EXIT STATUS
.B \fBefind\fR exits with status 0 if all files are processed successfully.

.SH SEE ALSO
\fBfind\fP(1)

.SH BUGS
The best way to report a bug is to use the form at
https://github.com/20centaurifux/efind/issues.
